// Generated by CoffeeScript 1.7.1
var WordTable;

WordTable = {
  maxKeywordAount: 20,
  threeColumnWidths: null,
  twoColumnWidths: null,
  tableHeight: 200,
  displayKeywordFunc: null,
  init: function() {
    var tableWidth;
    tableWidth = 1000;
    this.threeColumnWidths = {
      width: tableWidth,
      pol: 282,
      his: 381,
      food: 277
    };
    this.twoColumnWidths = {
      width: tableWidth,
      pol: 483,
      his: 0,
      food: 477
    };
    return d3.select(".keywordTable").style({
      height: "" + this.tableHeight + "px"
    });
  },
  setColumns: function(colNames) {
    var colWidths, divs, row;
    colWidths = colNames.length === 3 ? this.threeColumnWidths : this.twoColumnWidths;
    d3.select(".keywordTable").style('width', "" + colWidths.width + "px");
    row = d3.select(".keywordTable tr");
    row.selectAll("td").remove();
    return divs = row.selectAll("td").data(colNames).enter().append("td").append("div").attr("id", function(d) {
      return "" + d;
    }).style('width', function(d) {
      return "" + colWidths[d] + "px";
    }).style('height', function(d) {
      return "" + WordTable.tableHeight + "px";
    }).append("p").text("Click on a bar for its keywords");
  },
  clear: function() {
    d3.select(".keywordTable tr").selectAll("td").remove();
    return d3.select(".keywordTable").style({
      width: "0px",
      height: "0px"
    });
  },
  clearKeywords: function() {
    var row;
    row = d3.select(".keywordTable tr");
    return row.selectAll("span").remove();
  },
  setKeywords: function(setName, keywords) {
    var htmlText, keywordSpans, res, row, targetP;
    row = d3.select(".keywordTable tr");
    targetP = row.select("#" + setName + " p");
    if (keywords.length === 0) {
      targetP.text("No keywords");
      return;
    }
    targetP.text("");
    keywordSpans = targetP.selectAll(".keyword").data(keywords).enter().append("span").attr("onclick", function(d) {
      return "showKeywordText('" + d.name + "'," + d.year + ",'" + d.word + "')";
    }).attr("class", function(d) {
      return "" + d["class"] + " keyword";
    }).text(function(d) {
      return d.word;
    });
    htmlText = targetP.html();
    res = htmlText.replace(/></g, ">\n<");
    targetP.html(res);
    return targetP.selectAll(".keyword").style("opacity", 0).transition().duration(500).delay(function(d) {
      return 500 * Math.random();
    }).style("opacity", 1);
  },
  displayOverlapKeywords: function(name, set1, set2) {
    var keywordsToShow;
    keywordsToShow = set1.concat(set2);
    keywordsToShow.sort(function(a, b) {
      if (((a["class"] === name && name === b["class"])) || (!(a["class"] === name) && (name === b["class"]))) {
        return b.freq - a.freq;
      } else {
        if (a["class"] === name) {
          return 1;
        } else {
          return -1;
        }
      }
    });
    keywordsToShow = keywordsToShow.slice(0, this.maxKeywordAount);
    return this.setKeywords(name, keywordsToShow);
  },
  displayKeywordsWithMedia: function(name, yearData) {
    var docKeywords, mediaOverlapWords;
    docKeywords = yearData[name].kw.map(function(d) {
      return {
        word: d.w,
        freq: d.f,
        "class": name,
        year: yearData.no,
        name: name
      };
    });
    mediaOverlapWords = yearData.news[name].kw.map(function(d) {
      return {
        word: d.w,
        freq: d.f,
        "class": "" + name + " overlap",
        year: yearData.no,
        name: name
      };
    });
    return this.displayOverlapKeywords(name, docKeywords, mediaOverlapWords);
  },
  displayKeywordsOnlyDocument: function(name, yearData) {
    var docKeywords, historyOverlapWords;
    docKeywords = yearData[name].kw.map(function(d) {
      return {
        word: d.w,
        freq: d.f,
        "class": name,
        year: yearData.no,
        name: name
      };
    });
    historyOverlapWords = yearData.his.over[name].kw.map(function(d) {
      return {
        word: d,
        freq: 1,
        "class": "his",
        year: yearData.no,
        name: name
      };
    });
    return this.displayOverlapKeywords(name, docKeywords, historyOverlapWords);
  },
  displayForMediaView: function(yearno) {
    WordTable.setColumns(['pol', 'his', 'food']);
    WordTable.clearKeywords();
    WordTable.displayKeywordsWithMedia("pol", years[yearno]);
    WordTable.displayKeywordsWithMedia("his", years[yearno]);
    return WordTable.displayKeywordsWithMedia("food", years[yearno]);
  },
  displayForDocView: function(yearno) {
    WordTable.setColumns(['pol', 'food']);
    WordTable.clearKeywords();
    WordTable.displayKeywordsOnlyDocument("pol", years[yearno]);
    return WordTable.displayKeywordsOnlyDocument("food", years[yearno]);
  }
};
