// Generated by CoffeeScript 1.7.1
var axisCanvas, drawBarChart, drawKeywordsAmount, drawYearLines, mouseClickOnBar, subColor, svg;

svg = d3.select("#mainSVG").attr("height", totalHeight).attr("width", totalWidth);

svg.selectAll("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg = d3.select(".mainGraph");

axisCanvas = d3.select(".axisCanvas");

subColor = d3.scale.ordinal().domain([0, 1, 2, 3, 4]).range(["#4B4F98", "#6A4583", "#883A6E", "#A73059", "#C62644"]);

drawBarChart = function(group, array, className, align, maxWidth) {
  var bars, dotX, maxValue, newBars, newDots, newRects, rectX, x;
  maxValue = d3.max(array, function(d) {
    return d.value;
  });
  x = d3.scale.linear().range([0, maxWidth]).domain([0, maxValue]);
  bars = group.selectAll(".bar." + className).data(array);
  newBars = bars.enter().append("g").attr("class", "bar " + className).attr("transform", function(d) {
    return "translate(0," + (d.no * barWidth) + ")";
  });
  newRects = newBars.append("rect").on("click", mouseClickOnBar).attr("height", barWidth - barWidthMargin).attr("width", 0).attr("x", 0);
  newDots = newBars.append("circle").attr("cy", (barWidth - barWidthMargin) / 2).attr("r", circleRadius).attr("fill", function(d) {
    if (d.value === 0) {
      return "transparent";
    } else {
      return subColor(Math.floor(d.sub / 0.2));
    }
  }).attr("cx", 0);
  newRects.append("title").text(function(d) {
    return "" + d.value + " keywords";
  });
  newDots.append("title").text(function(d) {
    return "Subjective: " + (Math.floor(d.sub * 100)) + "%, Objective: " + (Math.floor(d.obj * 100)) + "%";
  });
  rectX = function() {
    return 0;
  };
  dotX = function() {
    return 0;
  };
  switch (align) {
    case Alignment.LEFT:
      rectX = function(d) {
        return 0;
      };
      dotX = function(d) {
        return x(d.value);
      };
      break;
    case Alignment.CENTER:
      rectX = function(d) {
        return x(-d.value / 2);
      };
      dotX = function(d) {
        return 0;
      };
      break;
    case Alignment.RIGHT:
      rectX = function(d) {
        return x(-d.value);
      };
      dotX = function(d) {
        return x(-d.value);
      };
  }
  newRects.transition().duration(1000).attr("width", function(d) {
    return x(d.value);
  }).attr("x", rectX);
  return newDots.transition().duration(1000).attr("cx", dotX);
};

drawKeywordsAmount = function(name) {
  var min_year, word_data, word_g;
  min_year = d3.min(years, function(d) {
    return d.no;
  });
  word_data = years.map(function(d) {
    var res_keywords;
    res_keywords = [];
    if (name === 'his') {
      res_keywords = d[name].kw;
    } else {
      res_keywords = d.his.over[name].kw.map(function(d) {
        return {
          w: d,
          f: 1
        };
      });
    }
    return {
      no: d.no - min_year,
      value: d[name].kw.length,
      sub: d[name].sub,
      obj: d[name].obj,
      keywords: res_keywords,
      name: name
    };
  });
  word_g = svg.append("g").attr("transform", "translate(" + ColumnX[name] + ",0)");
  return drawBarChart(word_g, word_data, name, ColumnAlignment[name], ColumnWidth[name]);
};

drawYearLines = function(axisCanvas) {
  var max_year, min_year, newLines, newYearAxisGs, year_data;
  min_year = d3.min(years, function(d) {
    return d.no;
  });
  max_year = d3.max(years, function(d) {
    return d.no;
  });
  year_data = years.map(function(d) {
    return {
      year: d.no,
      no: d.no - min_year
    };
  });
  year_data.push({
    year: "",
    no: max_year + 1 - min_year
  });
  newYearAxisGs = axisCanvas.selectAll(".yearAxis").data(year_data).enter().append("g").attr("transform", function(d) {
    return "translate(0," + (d.no * barWidth - barWidthMargin / 2) + ")";
  });
  newLines = newYearAxisGs.append("line").attr("x1", -margin.left).attr("x2", totalWidth).attr("y1", 0).attr("y2", 0).attr("class", "yearLine");
  newYearAxisGs.append("text").attr("x", 0).attr("y", barWidth - 5).attr("class", "yearText").text(function(d) {
    return d.year;
  });
  newYearAxisGs.append("text").attr("x", svgWidth).attr("y", barWidth - 5).attr("text-anchor", "end").attr("class", "yearText").text(function(d) {
    return d.year;
  });
  axisCanvas.append("line").attr("x1", ColumnX.pol).attr("x2", ColumnX.pol).attr("y1", 0).attr("y2", year_data[year_data.length - 1].no * barWidth).attr("class", "yearLine");
  return axisCanvas.append("line").attr("x1", ColumnX.food).attr("x2", ColumnX.food).attr("y1", 0).attr("y2", year_data[year_data.length - 1].no * barWidth).attr("class", "yearLine");
};

mouseClickOnBar = function(e) {
  return WordCloud.drawKeywords(e.name, e.keywords);
};

drawKeywordsAmount("pol");

drawKeywordsAmount("his");

drawKeywordsAmount("food");

drawYearLines(axisCanvas);

WordCloud.init();

LineGraph.init();

LineGraph.drawLineGraph("pol", Alignment.LEFT);

LineGraph.drawLineGraph("food", Alignment.RIGHT);

PieGraph.init();
