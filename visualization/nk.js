// Generated by CoffeeScript 1.7.1
var Alignment, ColumnAlignment, ColumnMargin, ColumnWidth, ColumnX, barWidth, barWidthMargin, circleRadius, drawBarChart, drawKeywordsAmount, food_data, food_g, his_data, his_g, margin, min_year, svg, svgHeight, svgWidth, totalHeight, totalWidth;

totalWidth = 1250;

totalHeight = 2500;

margin = {
  top: 20,
  right: 10,
  left: 10,
  bottom: 20
};

svgWidth = totalWidth - margin.left - margin.right;

svgHeight = totalHeight - margin.top - margin.bottom;

barWidth = 20;

circleRadius = 3;

barWidthMargin = 0.5;

Alignment = {
  LEFT: 1,
  CENTER: 2,
  RIGHT: 3
};

ColumnMargin = 0.01 * svgWidth;

ColumnWidth = {
  pol: 0.3 * svgWidth - 2 * ColumnMargin,
  his: 0.4 * svgWidth - 2 * ColumnMargin,
  food: 0.3 * svgWidth - 2 * ColumnMargin
};

ColumnX = {
  pol: 0.3 * svgWidth,
  his: 0.5 * svgWidth,
  food: 0.7 * svgWidth
};

ColumnAlignment = {
  pol: Alignment.RIGHT,
  his: Alignment.CENTER,
  food: Alignment.LEFT
};

svg = d3.select("svg").attr("height", totalHeight).attr("width", totalWidth);

svg.selectAll("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg = d3.select(".mainGraph");

drawBarChart = function(group, array, className, align, maxWidth) {
  var bars, dotX, maxValue, newBars, newDots, newRects, rectX, x;
  maxValue = d3.max(array, function(d) {
    return d.value;
  });
  x = d3.scale.linear().range([0, maxWidth]).domain([0, maxValue]);
  bars = group.selectAll(".bar." + className).data(array);
  newBars = bars.enter().append("g").attr("class", "bar " + className).attr("transform", function(d) {
    return "translate(0," + (d.year * barWidth) + ")";
  });
  newRects = newBars.append("rect").attr("height", barWidth - barWidthMargin).attr("width", 0).attr("x", 0);
  newDots = newBars.append("circle").attr("cy", (barWidth - barWidthMargin) / 2).attr("r", circleRadius).attr("fill", "black").attr("cx", 0);
  rectX = function() {
    return 0;
  };
  dotX = function() {
    return 0;
  };
  switch (align) {
    case Alignment.LEFT:
      rectX = function(d) {
        return 0;
      };
      dotX = function(d) {
        return x(d.value);
      };
      break;
    case Alignment.CENTER:
      rectX = function(d) {
        return x(-d.value / 2);
      };
      dotX = function(d) {
        return 0;
      };
      break;
    case Alignment.RIGHT:
      rectX = function(d) {
        return x(-d.value);
      };
      dotX = function(d) {
        return x(-d.value);
      };
  }
  newRects.transition().duration(1000).attr("width", function(d) {
    return x(d.value);
  }).attr("x", rectX);
  return newDots.transition().duration(1000).attr("cx", dotX);
};

drawKeywordsAmount = function(name) {
  var min_year, word_data, word_g;
  min_year = d3.min(years, function(d) {
    return d.no;
  });
  word_data = years.map(function(d) {
    return {
      year: d.no - min_year,
      value: d[name].kw.length
    };
  });
  word_g = svg.append("g").attr("transform", "translate(" + ColumnX[name] + ",0)");
  return drawBarChart(word_g, word_data, name, ColumnAlignment[name], ColumnWidth[name]);
};

drawKeywordsAmount("pol");

drawKeywordsAmount("his");

drawKeywordsAmount("food");

min_year = d3.min(years, function(d) {
  return d.no;
});

his_data = years.map(function(d) {
  return {
    year: d.no - min_year,
    value: d.his.over.pol.kw.length
  };
});

his_g = svg.append("g").attr("transform", "translate(0,0)");

drawBarChart(his_g, his_data, "his", Alignment.LEFT, 50);

food_data = years.map(function(d) {
  return {
    year: d.no - min_year,
    value: d.his.over.food.kw.length
  };
});

food_g = svg.append("g").attr("transform", "translate(" + svgWidth + ",0)");

drawBarChart(food_g, food_data, "food", Alignment.RIGHT, 50);
