// Generated by CoffeeScript 1.7.1
var axisCanvas, drawBarChart, drawColLine, drawKeywordsAmount, drawOverlapKeywords, drawTotalKeywords, drawYearLines, mouseClickOnBar, overlayCanvas, subColor, svg;

drawBarChart = function(group, array, className, align, maxWidth) {
  var bars, maxValue, newBars, newRects, rectX, x;
  maxValue = d3.max(array, function(d) {
    return d.value;
  });
  x = d3.scale.linear().range([0, maxWidth]).domain([0, maxValue]);
  bars = group.selectAll(".bar." + className).data(array);
  newBars = bars.enter().append("g").attr("class", "bar " + className).attr("transform", function(d) {
    return "translate(0," + (d.no * barWidth) + ")";
  });
  newRects = newBars.append("rect").on("click", mouseClickOnBar).attr("height", barWidth - barWidthMargin).attr("width", 0).attr("x", 0);
  newRects.append("title").text(function(d) {
    return "" + d.value + " keywords";
  });
  rectX = (function() {
    switch (align) {
      case Alignment.LEFT:
        return function(d) {
          return 0;
        };
      case Alignment.CENTER:
        return function(d) {
          return x(-d.value / 2);
        };
      case Alignment.RIGHT:
        return function(d) {
          return x(-d.value);
        };
    }
  })();
  return newRects.transition().duration(1000).attr("width", function(d) {
    return x(d.value);
  }).attr("x", rectX);
};

drawKeywordsAmount = function(name, keywordsAccessor, isOverLap) {
  var className, min_year, word_data, word_g;
  min_year = d3.min(years, function(d) {
    return d.no;
  });
  word_data = years.map(function(d) {
    var res_keywords;
    res_keywords = keywordsAccessor(d);
    if (isOverLap) {
      res_keywords = res_keywords.map(function(d) {
        return {
          w: d,
          f: 1
        };
      });
    }
    return {
      no: d.no - min_year,
      value: res_keywords.length,
      sub: d[name].sub,
      obj: d[name].obj,
      keywords: res_keywords,
      name: name
    };
  });
  className = isOverLap ? name + " overlap" : name;
  word_g = svg.append("g").attr("transform", "translate(" + ColumnX[name] + ",0)");
  return drawBarChart(word_g, word_data, className, ColumnAlignment[name], ColumnWidth[name]);
};

drawTotalKeywords = function(name) {
  return drawKeywordsAmount(name, function(d) {
    return d[name].kw;
  });
};

drawOverlapKeywords = function(name) {
  var acc;
  acc = function(d) {
    return d.news[name].kw;
  };
  return drawKeywordsAmount(name, acc, true);
};

drawYearLines = function(axisGroup, overlayGroup, ColLineStartY) {
  var max_year, min_year, yearAxisL, yearAxisLine, yearAxisR, yearScale, year_data;
  min_year = d3.min(years, function(d) {
    return d.no;
  });
  max_year = d3.max(years, function(d) {
    return d.no;
  });
  year_data = years.map(function(d) {
    return {
      year: d.no,
      no: d.no - min_year
    };
  });
  year_data.push({
    year: "",
    no: max_year + 1 - min_year
  });
  yearScale = d3.scale.linear().domain([min_year, max_year + 1]).range([0, (max_year - min_year + 1) * barWidth]);
  yearAxisLine = d3.svg.axis().scale(yearScale).orient("left").ticks(years.length).tickSize(-svgWidth);
  yearAxisL = d3.svg.axis().scale(yearScale).orient("left").ticks(years.length / 5).tickSize(0).tickFormat(d3.format("d")).tickPadding(yearTicksPadding);
  yearAxisR = d3.svg.axis().scale(yearScale).orient("right").ticks(years.length / 5).tickSize(0).tickFormat(d3.format("d")).tickPadding(yearTicksPadding);
  axisGroup.append("g").attr("class", "year axis line").attr("transform", "translate(0,-0.5)").call(yearAxisLine);
  axisGroup.append("g").attr("class", "year axis").attr("transform", "translate(0," + (barWidth / 2) + ")").call(yearAxisL);
  axisGroup.append("g").attr("class", "year axis").attr("transform", "translate(" + svgWidth + "," + (barWidth / 2) + ")").call(yearAxisR);
  overlayGroup.selectAll("line").remove();
  drawColLine(overlayGroup, ColumnX.pol, ColLineStartY.pol, year_data[year_data.length - 1].no * barWidth);
  drawColLine(overlayGroup, ColumnX.food, ColLineStartY.food, year_data[year_data.length - 1].no * barWidth);
  return drawColLine(overlayGroup, ColumnX.his, ColLineStartY.his, year_data[year_data.length - 1].no * barWidth);
};

drawColLine = function(group, x, y1, y2) {
  return group.append("line").attr("x1", x).attr("x2", x).attr("y1", y1).attr("y2", y2).attr("class", "colLine");
};

mouseClickOnBar = function(e) {
  WordTable.clearKeywords();
  WordTable.displayKeywordsWithMedia("pol", years[e.no]);
  WordTable.displayKeywordsWithMedia("his", years[e.no]);
  return WordTable.displayKeywordsWithMedia("food", years[e.no]);
};

svg = d3.select("#mainSVG").attr("height", totalHeight).attr("width", totalWidth);

svg.selectAll("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg = d3.select(".mainGraph");

axisCanvas = d3.select(".axisCanvas");

overlayCanvas = d3.select(".overlayCanvas");

subColor = d3.scale.ordinal().domain([0, 1, 2, 3, 4]).range(["#4B4F98", "#6A4583", "#883A6E", "#A73059", "#C62644"]);

console.log(years.map(function(d) {
  return d["pol"].kw.length;
}));

drawTotalKeywords("pol");

drawTotalKeywords("his");

drawTotalKeywords("food");

drawOverlapKeywords("pol");

drawOverlapKeywords("his");

drawOverlapKeywords("food");

drawYearLines(axisCanvas, overlayCanvas, {
  pol: 0,
  his: 0,
  food: 0
});

WordTable.init();
